doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Rebasing

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body
    <div class="header">
    p Pilih Persentasi:  <select onchange="location.href=this.options[this.selectedIndex].value">
    <option value="index.html">Branching Pada Git</option></a>
    <option value="Manajemen Branch.html">Manajemen Branch</option></a>
    <option value="Alur Kerja Branching.html">Alur Kerja Branching</option></a>
    <option value="Remote Branches.html">Remote Branches</option></a>
    <option value="" selected="1">Rebasing</option></a>
    </select>
    Pilih Slide:  <select onchange="location.href=this.options[this.selectedIndex].value">
    <option value="" selected="1">Slide 1</option></a>
    <option value="index.html#2">Slide 2</option></a>
    <option value="index.html#3">Slide 3</option></a>
    <option value="index.html#4">Slide 4</option></a>
    <option value="index.html#5">Slide 5</option></a>
    <option value="index.html#6">Slide 6</option></a>
    <option value="index.html#7">Slide 7</option></a>
    <option value="index.html#8">Slide 8</option></a>
    <option value="index.html#9">Slide 9</option></a>
    <option value="index.html#10">Slide 10</option></a>
    <option value="index.html#11">Slide 11</option></a>
    <option value="index.html#12">Slide 12</option></a>
    <option value="index.html#13">Slide 13</option></a>
    <option value="index.html#14">Slide 14</option></a>
    <option value="index.html#15">Slide 15</option></a>
    <option value="index.html#16">Slide 16</option></a>
    <option value="index.html#17">Slide 17</option></a>
    <option value="index.html#18">Slide 18</option></a>
    <option value="index.html#19">Slide 19</option></a>
    <option value="index.html#20">Slide 20</option></a>
    <option value="index.html#21">Slide 21</option></a>
    <option value="index.html#22">Slide 22</option></a>
    <option value="index.html#23">Slide 23</option></a>
    <option value="index.html#24">Slide 24</option></a>
    <option value="index.html#25">Slide 25</option></a>
    </select>
    </div>
    article

      section
        h1 Rebasing
        h2 Orange Team
      section
        p In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase. In this section you’ll learn what rebasing is, how to do it, why it’s a pretty amazing tool, and in what cases you won’t want to use it.
      section
        h2 The Basic Rebase
      section
        p If you go back to an earlier example from the Merge section (see Figure 3-27), you can see that you diverged your work and made commits on two different branches.
      section
        img(src="image/6.png")
        p Your initial diverged commit history.
      section
        p The easiest way to integrate the branches, as we’ve already covered, is the merge command. It performs a three-way merge between the two latest branch snapshots (C3 and C4) and the most recent common ancestor of the two (C2), creating a new snapshot (and commit), as shown in Figure 3-28.
        img(src="image/7.png")
        p Merging a branch to integrate the diverged work history.
      section
        p However, there is another way: you can take the patch of the change that was introduced in C3 and reapply it on top of C4. In Git, this is called rebasing. With the rebase command, you can take all the changes that were committed on one branch and replay them on another one.
        p In this example, you’d run the following:
        code.language-ini.
          $ git checkout experiment
          $ git rebase master
        p First, rewinding head to replay your work on top of it...
        p Applying: added staged command
      section
        p It works by going to the common ancestor of the two branches (the one you’re on and the one you’re rebasing onto), getting the diff introduced by each commit of the branch you’re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.
        img(src="image/8.png")
        p Rebasing the change introduced in C3 onto C4.
      section
        p At this point, you can go back to the master branch and do a fast-forward merge (see Figure 3-30).
        img(src="image/9.png")
        p Fast-forwarding the master branch.
      section
        p Now, the snapshot pointed to by C3' is exactly the same as the one that was pointed to by C5 in the merge example. There is no difference in the end product of the integration, but rebasing makes for a cleaner history. If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.
      section
        p Often, you’ll do this to make sure your commits apply cleanly on a remote branch — perhaps in a project to which you’re trying to contribute but that you don’t maintain. In this case, you’d do your work in a branch and then rebase your work onto origin/master when you were ready to submit your patches to the main project. That way, the maintainer doesn’t have to do any integration work — just a fast-forward or a clean apply.
      section
        p Note that the snapshot pointed to by the final commit you end up with, whether it’s the last of the rebased commits for a rebase or the final merge commit after a merge, is the same snapshot — it’s only the history that is different. Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.
      section
        h2 More Interesting Rebase
      section
        p You can also have your rebase replay on something other than the rebase branch. Take a history like Figure 3-31, for example. You branched a topic branch (server) to add some server-side functionality to your project, and made a commit. Then, you branched off that to make the client-side changes (client) and committed a few times. Finally, you went back to your server branch and did a few more commits.
      section
        img(src="image/10.png")
        p A history with a topic branch off another topic branch.

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild