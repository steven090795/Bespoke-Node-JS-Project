doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Alur Kerja Branching

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body
    <div class="header">
    p Pilih Persentasi:  <select onchange="location.href=this.options[this.selectedIndex].value">
    <option value="index.html">Branching Pada Git</option></a>
    <option value="Manajemen Branch.html">Manajemen Branch</option></a>
    <option value="" selected="1">Alur Kerja Branching</option></a>
    </select>
    </div>
    article

      section
        h1 Alur Kerja Branching
        h2 Orange Team
      section
        h3 Sekarang dimana anda telah memiliki dasar-dasar branching dan merging, apa yang bisa atau harus anda lakukan dengannya? Pada bagian ini, kerjaita akan membahas beberapa alur kerja umum yang menjadi mungkin dengan adanya proses branching yang ringan ini, sehingga anda dapat memutuskan apakah anda ingin memasukkannya ke dalam siklus pengembangan (development) anda.
      section
        h2 Branch Berjangka Lama (Long-Running Branches)
      section
        h3 Karena Git menggunakan three-way merge yang sederhana, menggabungkan dari satu branch ke yang lainnya berkali-kali dalam jangka yang panjang umumnya mudah untuk dilakukan. Ini berarti anda dapat memiliki beberapa branch yang selalu terbuka dan yang anda gunakan untuk tahap yang berbeda dari siklus development anda; anda dapat melakukan merge secara regular atas beberapa dari mereka ke yang lainnya.
      section
        h3 Banyak pengembang Git memiliki alur kerja yang mencakup pendekatan ini, seperti hanya memiliki kode yang sepenuhnya stabil dalam branch <strong>master</strong> mereka - mungkin hanya kode yang telah atau akan dirilis. Mereka memiliki branch paralel lain yang bernama <strong>develop</strong> atau next dimana mereka mengerjakan darinya atau menggunakannya untuk menguji stabilitas - belum tentu selalu stabil, namun setiap kali sampai ke keadaan stabil, branch dapat digabungkan ke <strong>master</strong>. Ini digunakan untuk melakukan pull dari topic branch (branch berumur pendek, seperti branch <strong>iss53</strong> anda sebelumnya) ketika mereka telah siap, untuk memastikan mereka lolos semua pengujian dan tidak memiliki bug (kesalahan).
      section
        h3 Pada kenyataannya, kita sedang berbicara mengenai pointer yang bergerak menaiki garis commit yang anda buat. Branch yang stabil berada jauh di bawah garis histori dari commit anda, dan branch yang bersifat bleeding-edge berada di histori terdepan
      section
        image image
      section
        image image
      section
        h2 Branch Berjangka Pendek (Topic Branches)
      section
        h3 Topic branch, bagaimanapun, berguna pada proyek-proyek untuk berbagai ukuran. Sebuah topic branch adalah branch berumur singkat yang anda buat dan gunakan untuk suatu fitur tertentu atau pekerjaan yang terkait.
      section
        h3 Kita ambil contoh berupa melakukan beberapa pekerjaan (pada <strong>master</strong>), branching untuk sebuah masalah (<strong>iss91</strong>), bekerja di atasnya untuk sesaat, melakukan branching kedua kalinya untuk mencoba cara lain dalam menangani hal yang sama (<strong>iss91v2</strong>), kembali ke branch master dan bekerja di sana untuk sementara, dan kemudian melakukan branching disana untuk melakukan beberapa pekerjaan yang anda belum yakin apakah ide itu baik (branch <strong>dumbidea</strong>).
      section
        image image
      section
        h3 Sekarang, katakanlah anda memutuskan anda suka solusi kedua atas masalah anda dibanding yang lain (<strong>iss91v2</strong>); dan anda menunjukkan branch <strong>dumbidea</strong> ke rekan kerja anda, dan tampak menjadi sesuatu yang jenius. Anda dapat membuang branch <strong>iss91</strong> yang asli (kehilangan commit C5 dan C6) dan menggabungkan dua lainnya.
      section
        image image
      section
        h3 Sangat penting untuk diingat ketika anda melakukan semua ini bahwa kesemua branch tersebut berada di lokal. Ketika anda melakukan branching dan merging, semuanya dilakukan hanya dalam repositori Git anda - tidak ada komunikasi yang terjadi dengan server.
      section
        h2 Branching Pada Git - Remote Branches
      section
        h3 Remote Branches
        p Remote branches diibaratkan suatu keadaan cabang di repositori anda. Mereka adalah cabang lokal yang tidak dapat dipindah; mereka secara otomatis dipindah bilamana anda melakukan komunikasi jaringan. Remote branches berlaku seperti penanda halaman yang mengingatkan anda dimana waktu terakhir cabang yang di remote repositori anda koneksikan.
      section
        p Katakan anda mempunyai Git server di jaringan anda di git.ourcompany.com. Jika anda menkloning dari sini, Git otomatis menamainya <i>origin</i>, mengunduh semua datanya, membuat sebuah pointer dimana cabang master berada, dan menamainya <i>origin/master</i> di lokal; dan anda tidak dapat memindahnya. Git juga memberikan cabang <i>master</i> anda dimulai dari lokasi yang sama sebagai cabang master origin, jadi anda mempunyai sesuatu untuk dikerjakan.
      section
        <img src="">
        p Figure 3-22. A Git clone gives you your own master branch and origin/master pointing to origin’s master branch.
      section
        p If you do some work on your local master branch, and, in the meantime, someone else pushes to <a href="git.ourcompany.com">git.ourcompany.com</a>and updates its master branch, then your histories move forward differently. Also, as long as you stay out of contact with your origin server, your origin/master pointer doesn’t move (see Figure 3-23).
      section
        <img src="">
        p Figure 3-23. Working locally and having someone push to your remote server makes each history move forward differently.
      section
        p To synchronize your work, you run a git fetch origin command. This command looks up which server origin is (in this case, it’s git.ourcompany.com), fetches any data from it that you don’t yet have, and updates your local database, moving your origin/master pointer to its new, more up-to-date position (see Figure 3-24).
      section
        <img src="">
        p Figure 3-24. The git fetch command updates your remote references.
      section
        p To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let’s assume you have another internal Git server that is used only for development by one of your sprint teams. This server is at git.team1.ourcompany.com. You can add it as a new remote reference to the project you’re currently working on by running the git remote add command as we covered in Chapter 2. Name this remote teamone, which will be your shortname for that whole URL (see Figure 3-25).
      section
        <img src="">
        p Figure 3-25. Adding another server as a remote.
      section
        p Now, you can run git fetch teamone to fetch everything the remote teamone server has that you don’t have yet. Because that server is a subset of the data your origin server has right now, Git fetches no data but sets a remote branch called teamone/master to point to the commit that teamone has as its master branch (see Figure 3-26).
      section
        <img src="">
        p Figure 3-26. You get a reference to teamone’s master branch position locally.
      section
        h3 Pushing
        p When you want to share a branch with the world, you need to push it up to a remote that you have write access to. Your local branches aren’t automatically synchronized to the remotes you write to — you have to explicitly push the branches you want to share. That way, you can use private branches for work you don’t want to share, and push up only the topic branches you want to collaborate on.
      section
        p If you have a branch named serverfix that you want to work on with others, you can push it up the same way you pushed your first branch. Run git push (remote) (branch):
        p $ git push origin serverfix
        p Counting objects: 20, done.
        p Compressing objects: 100% (14/14), done.
        p Writing objects: 100% (15/15), 1.74 KiB, done.
        p Total 15 (delta 5), reused 0 (delta 0)
        p To git@github.com:schacon/simplegit.git
        p  * [new branch]      serverfix -> serverfix
      section
        p This is a bit of a shortcut. Git automatically expands the serverfix branchname out to refs/heads/serverfix:refs/heads/serverfix, which means, “Take my serverfix local branch and push it to update the remote’s serverfix branch.” We’ll go over the refs/heads/ part in detail in Chapter 9, but you can generally leave it off. You can also do git push origin serverfix:serverfix, which does the same thing — it says, “Take my serverfix and make it the remote’s serverfix.” You can use this format to push a local branch into a remote branch that is named differently. If you didn’t want it to be called serverfix on the remote, you could instead run git push origin serverfix:awesomebranch to push your local serverfix branch to the awesomebranch branch on the remote project.
      section
        p The next time one of your collaborators fetches from the server, they will get a reference to where the server’s version of serverfix is under the remote branch origin/serverfix:
        p $ git fetch origin
        p remote: Counting objects: 20, done.
        p remote: Compressing objects: 100% (14/14), done.
        p remote: Total 15 (delta 5), reused 0 (delta 0)
        p Unpacking objects: 100% (15/15), done.
        p From git@github.com:schacon/simplegit
        p  * [new branch]      serverfix    -> origin/serverfix
      section
        p It’s important to note that when you do a fetch that brings down new remote branches, you don’t automatically have local, editable copies of them. In other words, in this case, you don’t have a new serverfix branch — you only have an origin/serverfix pointer that you can’t modify.
      section
        p To merge this work into your current working branch, you can run git merge origin/serverfix. If you want your own serverfix branch that you can work on, you can base it off your remote branch:
        p $ git checkout -b serverfix origin/serverfix
        p Branch serverfix set up to track remote branch refs/remotes/origin/serverfix.
        p Switched to a new branch "serverfix"
        p This gives you a local branch that you can work on that starts where origin/serverfix is.
      section
        h3 Tracking Branches
        p Checking out a local branch from a remote branch automatically creates what is called a tracking branch. Tracking branches are local branches that have a direct relationship to a remote branch. If you’re on a tracking branch and type git push, Git automatically knows which server and branch to push to. Also, running git pull while on one of these branches fetches all the remote references and then automatically merges in the corresponding remote branch.
      section
        p When you clone a repository, it generally automatically creates a master branch that tracks origin/master. That’s why git push and git pull work out of the box with no other arguments. However, you can set up other tracking branches if you wish — ones that don’t track branches on origin and don’t track the master branch. The simple case is the example you just saw, running git checkout -b [branch] [remotename]/[branch]. If you have Git version 1.6.2 or later, you can also use the --track shorthand:
        p $ git checkout --track origin/serverfix
        p Branch serverfix set up to track remote branch refs/remotes/origin/serverfix.
        p Switched to a new branch "serverfix"
      section
        p To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:
        p $ git checkout -b sf origin/serverfix
        p Branch sf set up to track remote branch refs/remotes/origin/serverfix.
        p Switched to a new branch "sf"
        p Now, your local branch sf will automatically push to and pull from origin/serverfix.
      section
        h3 Deleting Remote Branches
      section
        p Suppose you’re done with a remote branch — say, you and your collaborators are finished with a feature and have merged it into your remote’s master branch (or whatever branch your stable codeline is in). You can delete a remote branch using the rather obtuse syntax git push [remotename] :[branch]. If you want to delete your serverfix branch from the server, you run the following:
        p $ git push origin :serverfix
        p To git@github.com:schacon/simplegit.git
        p - [deleted]         serverfix
      section
        p Boom. No more branch on your server. You may want to dog-ear this page, because you’ll need that command, and you’ll likely forget the syntax. A way to remember this command is by recalling the git push [remotename] [localbranch]:[remotebranch] syntax that we went over a bit earlier. If you leave off the [localbranch] portion, then you’re basically saying, “Take nothing on my side and make it be [remotebranch].”
    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild