doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Branching Pada Git

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body
    <div class="header">
      p Pilih:  
      <div class="style-select">
        <select onchange="location.href=this.options[this.selectedIndex].value">
          <option value="index.html">Home</option></a>
          <option value="Alur Kerja Branching.html">Alur Kerja Branching</option></a>
          <option value="Manajemen Branch.html">Manajemen Branch</option></a>
          <option value="Remote Branches.html">Remote Branches</option></a>
          <option value="Rebasing.html">Rebasing</option></a>
        </select>
      </div>
    </div>
    article
      section
        h1 Branching Pada Git
        h2 
      section
        h2
      section
        h3 Ketika anda melakukan commit dalam Git, Git menyimpan sebuah object commit yang berisi pointer ke snapshot dari konten yang anda staged, metadata pembuat (author) dan pesan (message), dan nol atau lebih pointer ke commit yang merupakan parent (induk) langsung dari commit ini: nol jika ini commit yang pertama, satu jika ini commit yang normal, dan beberapa jika ini commit yang dihasilkan dari gabungan antara dua atau lebih branch.
      section
        h3 Untuk memvisualisasikan ini, mari kita asumsikan anda memiliki direktori yang berisi tiga buah berkas, dan anda menambahkan mereka ke stage dan melakukan commit. Proses staging berkas melakukan checksum (dengan hash SHA-1), menyimpan versi berkas tersebut dalam repositori Git (Git merujuknya sebagai 'blobs'), dan menambahkan checksum tersebut ke staging area:
      section
        pre 
        code.language-bash.
          $ git add README test.rb LICENSE
          $ git commit -m 'initial commit of my project'
      section
        h3 Ketika anda membuat commit dengan menjalankan <strong>git commit</strong>, Git melakukan checksum pada setiap subdirektori dan menyimpan object tree tersebut dalam repositori Git. Git kemudian membuat object commit yang memiliki metadata dan pointer ke root dari project tree sehingga dapat membuat kembali snapshot tersebut bila diperlukan.
      section
        h3 Sebuah branch di Git secara sederhana hanyalah pointer yang dapat bergerak ke salah satu commit. Nama default dari branch dalam Git adalah master. Ketika anda membuat commit di awal, anda diberikan sebuah branch master yang menunjuk ke commit terakhir yang anda buat. Setiap kali anda melakukan commit, ia bergerak maju secara otomatis.
      section
        img(src="image/21.png")
      section
        h2 Apa yang terjadi jika anda membuat branch baru?
      section
        h3.bullet Nah, melakukan hal tersebut menciptakan sebuah pointer baru untuk bergerak. Katakanlah anda membuat branch baru yang bernama <strong>testing</strong>. Anda melakukan ini dengan perintah <strong>git branch</strong>:
        pre.bullet
          $ git branch testing
        h3.bullet Hal ini menciptakan sebuah pointer (penunjuk) baru pada commit yang sama dengan yang saat ini anda berada 
      section
        img(src="image/22.png")
      section
        h2 Bagaimana Git tahu di branch mana anda berada saat ini?
      section
        h3 Git menyimpan sebuah pointer khusus yang disebut HEAD. Perhatikan bahwa ini adalah jauh berbeda dari konsep HEAD di VCS lain yang mungkin pernah anda gunakan, seperti Subversion atau CVS. Dalam Git, HEAD ini adalah pointer ke branch lokal anda saat ini. Dalam kasus ini, anda masih berada di master. Perintah git branch hanya menciptakan sebuah branch baru â€” namun tidak dengan serta-merta beralih ke branch itu
      section
        img(src="image/23.png")
      section
        h2 Bagaimana cara untuk memindahkan HEAD pada branch testing?
      section
        h3.bullet Untuk beralih ke branch yang telah ada, anda dapat menjalankan perintah <strong>git checkout</strong>. Mari kita beralih ke branch testing yang baru saja dibuat:
        pre.bullet
          $ git checkout testing
        h3.bullet maka HEAD menunjuk ke branch testing
      section
        img(src="image/24.png")
      section
        h2 Apa pentingnya itu?
        h3 Baiklah, mari kita lakukan commit lain:
        pre
        code.language-bash.
          $ vim test.rb
          $ git commit -a -m 'made a change'
      section
          img(src="image/25.png")
      section
        h3.bullet Hal ini menarik, karena sekarang branch testing anda telah bergerak maju, tetapi cabang master anda masih menunjuk ke commit dimana disitu anda menjalankan <strong>git checkout</strong> untuk beralih branch. Mari kita beralih kembali ke branch master:
        pre.bullet
          $ git checkout master
      section
        img(src="image/26.png")
      section
        h3 Perintah tersebut melakukan dua hal. Ia memindahkan pointer HEAD kembali menunjuk ke branch master, dan ia mengembalikan berkas-berkas dalam direktori kerja anda kembali ke snapshot yang ditunjuk oleh master. Ini juga berarti perubahan yang anda lakukan dari titik ini ke depan akan berubah arah dari versi lama dari proyek. Hal ini pada dasarnya melakukan pemutaran balik pekerjaan yang anda lakukan dalam branch testing anda untuk sementara sehingga anda dapat pergi ke arah yang berbeda.
      section
        h3.bullet Mari buat sedikit perubahan dan lakukan commit lagi:
        pre.bullet
        code.language-bash.
          $ vim test.rb
          $ git commit -a -m 'made other changes'
      section
        img(src="image/27.png")
      section
        h3 Sekarang histori proyek anda telah berubah arah. Anda membuat dan beralih ke suatu branch, melakukan beberapa pekerjaan di atasnya, dan kemudian beralih kembali ke branch utama anda dan melakukan pekerjaan lain. Kedua perubahan itu terisolasi dalam branch terpisah: anda dapat beralih antara branch dan menggabungkan (merge) mereka bersama-sama ketika anda siap. Dan anda melakukan semua itu dengan perintah branch dan checkout yang sederhana
    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild